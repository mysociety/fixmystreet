#!/usr/bin/env perl

# problem-creation-graph:
# Plot graph of rate of problem creation
#
# Copyright (c) 2014 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org. WWW: http://www.mysociety.org

use strict;
use warnings;
require 5.8.0;

use FindBin;
use File::Temp qw(tempfile);

use FixMyStreet::App;

chdir("$FindBin::Bin/../");

my %config = (
    gplot_output => "set terminal png font 'Vera.ttf' 9 size 1200,400",
    extension => '.png',
    #gplot_output => "set terminal fig color big thickness 1"
    #extension => ".fig"
    #gplot_output => "set terminal svg size 800 250"
    #extension => ".svg"
);

my $base_url = FixMyStreet->config('BASE_URL');
$config{date} = '2007-02-01';
$config{date} = '2011-03-03' if $base_url =~ /fiksgatami/;
$config{date} = '2008-10-01' if $base_url =~ /emptyhomes/;

my @sources;
for (0..6) {
    my ($fh, $filename) = tempfile("fms-creation-rate-graph-data-XXXXXXXXXX", UNLINK => 1);
    push @sources, [ $fh, $filename ];
}

sub grab_data($$) {
    my ($selection, $i) = @_;
    my @entries = FixMyStreet::App->model('DB::Problem')->search(
        $selection, {
            columns => [
                { 'date' => { date => 'created' } },
                { 'count' => { count => '*' } }
            ],
            group_by => [ 'date' ],
            order_by => [ 'date' ],
        }
    );
    @entries = map { { $_->get_columns } } @entries;
    map { $sources[$i][0]->print($_->{date}, ' ', $_->{count}, "\n") } @entries;
}

# rather nastily, work out the cumulative heights in reverse, so can
# plot impulses on top of each other
grab_data({}, 0);
my @states_to_ignore = ('unconfirmed');
grab_data({ state => { -not_in => \@states_to_ignore } }, 1);
push @states_to_ignore, FixMyStreet::DB::Result::Problem->open_states();
grab_data({ state => { -not_in => \@states_to_ignore } }, 2);
push @states_to_ignore, FixMyStreet::DB::Result::Problem->fixed_states();
grab_data({ state => { -not_in => \@states_to_ignore } }, 3);
push @states_to_ignore, FixMyStreet::DB::Result::Problem->closed_states();
grab_data({ state => { -not_in => \@states_to_ignore } }, 4);
push @states_to_ignore, 'hidden';
grab_data({ state => { -not_in => \@states_to_ignore } }, 5);

my $gp = <<END;
    unset border
    unset arrow
    set key left
    set tics out
    $config{gplot_output}

    set xdata time
    set timefmt "%Y-%m-%d"
    set xrange ["$config{date}":]
    set format x "%d %b %Y"
    set xtics nomirror
    set xlabel "status of problems that were created on each calendar day"

    set ytics nomirror 
    set ylabel "number of problems created on the calendar day" 
    set y2tics tc lt 0
    set y2label "cumulative total number of problems" tc lt 0
    set format y2 "%.0f"

#    set arrow 1 from '2005-02-14', 0 to '2005-02-14', 900 lt 0 nohead
#    set label 1 'launch of beta' at '2005-02-17', 900

    n = 0
END
$gp .= "    plot \"$sources[0][1]\" using 1:2 with impulses lt 1 lw 2 title \"unconfirmed\",";
$gp .= " \"$sources[1][1]\" using 1:2 with impulses lt 3 lw 2 title \"open\","
    if -s $sources[1][1];
$gp .= " \"$sources[2][1]\" using 1:2 with impulses lt 2 lw 2 title \"fixed\","
    if -s $sources[2][1];
$gp .= " \"$sources[3][1]\" using 1:2 with impulses lt 4 lw 2 title \"closed\","
    if -s $sources[3][1];
$gp .= " \"$sources[4][1]\" using 1:2 with impulses lt 5 lw 2 title \"hidden\","
    if -s $sources[4][1];
$gp .= " \"$sources[5][1]\" using 1:2 with impulses lt 6 lw 2 title \"any other type\","
    if -s $sources[5][1];
$gp .= <<END;
    "< awk 'BEGIN { n = 0 } { n += \$2; print \$1, \$2, n; }' $sources[0][1]" using 1:3 axes x1y2 with lines lt 0 title "cumulative total number of problems"
END

open(my $gnuplot, '|-', "GDFONTPATH=/usr/share/fonts/truetype/ttf-bitstream-vera gnuplot > web/fms-live-creation$config{extension} 2> /dev/null");
$gnuplot->print($gp);
close $gnuplot;
