#!/usr/bin/env perl
#
# This script will create a test body and its categories, covering the area
# provided, and users associated with that body, which should help testing
# of report interactions.

use strict;
use warnings;
use v5.14;

BEGIN {
    use File::Basename qw(dirname);
    use File::Spec;
    my $d = dirname(File::Spec->rel2abs($0));
    require "$d/../../setenv.pl";
}

use FixMyStreet::Cobrand;
use FixMyStreet::DB::Factories;
use Getopt::Long::Descriptive;
use Path::Tiny 'path';

my ($opt, $usage) = describe_options(
    '%c %o',
    [ 'area-id=i', "MapIt area ID to create body for", { required => 1 } ],
    [ 'name:s', "Name of body to use (defaults to MapIt area name)" ],
    [ 'empty', "Empty all tables of the database first" ],
    [ 'commit', "Actually commit changes to the database" ],
    [ 'help', "print usage message and exit", { shortcircuit => 1 } ],
);
print($usage->text), exit if $opt->help;

my $db = FixMyStreet::DB->storage;
$db->txn_begin;
END {
    if ($db) {
        $opt->commit ? $db->txn_commit : $db->txn_rollback;
    }
}
if (!$opt->commit) {
    say "NOT COMMITTING TO DATABASE";
}

if ($opt->empty) {
    $db->dbh->do(q{
DO
$func$
BEGIN
    EXECUTE
    (SELECT 'TRUNCATE TABLE ' || string_agg(quote_ident(tablename), ', ') || ' RESTART IDENTITY CASCADE '
        FROM pg_tables WHERE schemaname='public');
END
$func$;
}) or die $!;
    $db->dbh->do( path('db/alert_types.sql')->slurp ) or die $!;
    $db->dbh->do( path('db/generate_secret.sql')->slurp ) or die $!;
    say "Emptied database";
}

# Body + categories
my $categories = ['Potholes', 'Street lighting', 'Graffiti', 'Other'];
my $body = FixMyStreet::DB::Factory::Body->find_or_create({
    area_id => $opt->area_id,
    categories => $categories,
    $opt->name ? (name => $opt->name) : (),
});
say "Created body " . $body->name . " for MapIt area ID " . $opt->area_id . ', categories ' . join(', ', @$categories);

# Users
say "Created users, all with password 'password':";
my $user; # Will store the final (normal) user of the loop for later user
my $perms_inspector = ['report_inspect', 'planned_reports'];
my $perms_cs = [
    'contribute_as_body', 'contribute_as_another_user',
    'moderate', 'view_body_contribute_details',
];
foreach (
    { name => 'Inspector Gadget', email => 'inspector@example.org', body => $body, permissions => $perms_inspector },
    { name => 'Harriet Helpful', email => 'cs@example.org', body => $body, permissions => $perms_cs },
    { name => 'Super User', email => 'super@example.org', body => $body, permissions => [
        @$perms_cs, @$perms_inspector, 'report_edit',
        'category_edit', 'template_edit', 'responsepriority_edit',
        'user_assign_body', 'user_manage_permissions', 'user_edit',
    ] },
    { name => 'Wizard of Oz', email => 'admin@example.org', is_superuser => 't' },
    { name => "Norma User", email => 'user@example.org' },
) {
    $user = FixMyStreet::DB::Factory::User->find_or_create($_);
    my $perms = $_->{permissions} ? " (" . join(', ', @{$_->{permissions} || []}) . ")" : "";
    my $su = $_->{is_superuser} ? " (superuser)" : "";
    say "* $_->{email}$perms$su";
}

# Problems

my $postcode = mySociety::MaPit::call('area/example_postcode', $opt->area_id);
$postcode = mySociety::MaPit::call('postcode', $postcode);

my $cobrand = 'default';
foreach (FixMyStreet::Cobrand->available_cobrand_classes) {
    my $sub = $_->{class} && $_->{class}->can('council_id');
    if ($sub && &$sub == $opt->area_id) {
        $cobrand = $_->{class}->moniker;
        last;
    }
}

my $num = 10;
say "Created $num problems around '$postcode->{postcode}' in cobrand '$cobrand'";
my $inaccurate_km = 0.01;
my $problems = [];
push @$problems, FixMyStreet::DB::Factory::Problem->create({
    body => $body,
    user => $user,
    latitude => $postcode->{wgs84_lat} + rand($inaccurate_km) - $inaccurate_km / 2,
    longitude => $postcode->{wgs84_lon} + rand($inaccurate_km) - $inaccurate_km / 2,
    category => $categories->[int(rand(@$categories))],
    cobrand => $cobrand,
}) for 1..$num;

# Comment

my $updates = [];
push @$updates, FixMyStreet::DB::Factory::Comment->create({
    problem => $problems->[int(rand(@$problems))],
    user => $user,
}) for 1..$num;
say "Created $num updates on problems " . join(', ', map { $_->problem_id } @$updates);
