#!/usr/bin/perl -w

# send-reports:
# Send new problem reports to councils
#
# Copyright (c) 2007 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org. WWW: http://www.mysociety.org
#
# $Id: send-reports,v 1.79 2010-01-06 16:50:26 louise Exp $

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";
use Digest::MD5;
use Encode;
use Error qw(:try);
use File::Slurp;
use JSON;
use LWP::UserAgent;
use LWP::Simple;
use CGI; # Trying awkward kludge
use CronFns;

use EastHantsWSDL;
use Cobrand;
use Utils;
use mySociety::Config;
use mySociety::DBHandle qw(dbh);
use mySociety::Email;
use mySociety::EmailUtil;
use mySociety::Locale;
use mySociety::MaPit;
use mySociety::Random qw(random_bytes);
use mySociety::Web qw(ent);

BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
    mySociety::DBHandle::configure(
        Name => mySociety::Config::get('BCI_DB_NAME'),
        User => mySociety::Config::get('BCI_DB_USER'),
        Password => mySociety::Config::get('BCI_DB_PASS'),
        Host => mySociety::Config::get('BCI_DB_HOST', undef),
        Port => mySociety::Config::get('BCI_DB_PORT', undef)
    );
}

use XML::Simple;
use LWP::Simple;
use Data::Dumper;
my $nominatimbase = "http://nominatim.openstreetmap.org/";
my $osmbase       = "http://www.openstreetmap.org/api/";

# Set up site, language etc.
my ($verbose, $nomail) = CronFns::options();
my $base_url = mySociety::Config::get('BASE_URL');
my $site = CronFns::site($base_url);

my $query = "SELECT id, council, category, title, detail, name, email, phone,
    used_map, latitude, longitude, (photo is not null) as has_photo, lang, 
    cobrand, cobrand_data, date_trunc('second', confirmed) as confirmed, postcode
      FROM problem
      WHERE state in ('confirmed','fixed')
        AND whensent IS NULL
        AND council IS NOT NULL";
my $unsent = dbh()->selectall_arrayref($query, { Slice => {} });

my (%notgot, %note);
my $cobrand;
my $cobrand_data;
foreach my $row (@$unsent) {
    
    $cobrand = $row->{cobrand};
    $cobrand_data = $row->{cobrand_data};
    # Cobranded and non-cobranded messages can share a database. In this case, the conf file 
    # should specify a vhost to send the reports for each cobrand, so that they don't get sent 
    # more than once if there are multiple vhosts running off the same database. The email_host
    # call checks if this is the host that sends mail for this cobrand.
    next unless (Cobrand::email_host($cobrand));
    Cobrand::set_lang_and_domain($cobrand, $row->{lang}, 1);
    if (dbh()->selectrow_array('select email from abuse where lower(email)=?', {}, lc($row->{email}))) {
        dbh()->do("update problem set state='hidden' where id=?", {}, $row->{id});
        dbh()->commit();
        next;
    }

    my $send_email = 0;
    my $send_web = 0;

    mySociety::Locale::change($row->{lang});

    # Template variables for the email
    my $email_base_url = Cobrand::base_url_for_emails($cobrand, $cobrand_data);
    my %h = map { $_ => $row->{$_} } qw/id title detail name email phone category latitude longitude confirmed used_map/;
    $h{query} = $row->{postcode};
    $h{url} = $email_base_url . '/report/' . $row->{id};
    $h{phone_line} = $h{phone} ? _('Phone:') . " $h{phone}\n\n" : '';
    if ($row->{has_photo}) {
        $h{has_photo} = _("This web page also contains a photo of the problem, provided by the user.") . "\n\n";
        $h{image_url} = $email_base_url . '/photo?id=' . $row->{id};
    } else {
        $h{has_photo} = '';
        $h{image_url} = '';
    }
    $h{fuzzy} = $row->{used_map} ? _('To view a map of the precise location of this issue')
        : _('The user could not locate the problem on a map, but to see the area around the location they entered');
    $h{closest_address} = '';
    
    # If we are in the UK include eastings and northings, and nearest stuff
    $h{easting_northing} = '';
    if ( mySociety::Config::get('COUNTRY') eq 'GB' ) {

        ( $h{easting}, $h{northing} ) = Utils::convert_latlon_to_en( $h{latitude}, $h{longitude} );

        # email templates don't have conditionals so we need to farmat this here
        $h{easting_northing}                             #
          = "Easting: $h{easting}\n\n"                   #
          . "Northing: $h{northing}\n\n";
    }
    $h{closest_address} = find_closest($row, $h{latitude}, $h{longitude});
    $h{closest_address_machine} = $h{closest_address};

    my (@to, @recips, $template, $areas_info);
    if ($site eq 'emptyhomes') {

        my $council = $row->{council};
        $areas_info = mySociety::MaPit::call('areas', $council);
        my $name = $areas_info->{$council}->{name};
        my ($council_email, $confirmed, $note) = dbh()->selectrow_array(
            "SELECT email,confirmed,note FROM contacts WHERE deleted='f'
                and area_id=? AND category=?", {}, $council, 'Empty property');
        unless ($confirmed) {
            $note = 'Council ' . $council . ' deleted' unless $note;
            $council_email = 'N/A' unless $council_email;
            $notgot{$council_email}{$row->{category}}++;
            $note{$council_email}{$row->{category}} = $note;
            next;
        }

        push @to, [ $council_email, $name ];
        @recips = ($council_email);
        $send_email = 1;
        $template = File::Slurp::read_file("$FindBin::Bin/../templates/emails/submit-eha");

    } else {

        # XXX Needs locks!
        my @all_councils = split /,|\|/, $row->{council};
        my ($councils, $missing) = $row->{council} =~ /^([\d,]+)(?:\|([\d,]+))?/;
        my @councils = split(/,/, $councils);
        $areas_info = mySociety::MaPit::call('areas', \@all_councils);
        my (@dear, %recips);
        my $all_confirmed = 1;
        foreach my $council (@councils) {
            my $name = $areas_info->{$council}->{name};
            push @dear, $name;
            if ($council == 2330) { # E. Hants have a web service
                $send_web = 'easthants';
                $h{category} = 'Customer Services' if $h{category} eq 'Other';
            } elsif ($areas_info->{$council}->{type} eq 'LBO') { # London
                $send_web = 'london';
            } else {
                my ($council_email, $confirmed, $note) = dbh()->selectrow_array(
                    "SELECT email,confirmed,note FROM contacts WHERE deleted='f'
                        and area_id=? AND category=?", {}, $council, $row->{category});
                $council_email = essex_contact($row->{latitude}, $row->{longitude}) if $council == 2225;
                $council_email = oxfordshire_contact($row->{latitude}, $row->{longitude}) if $council == 2237 && $council_email eq 'SPECIAL';
                unless ($confirmed) {
                    $all_confirmed = 0;
                    $note = 'Council ' . $row->{council} . ' deleted'
                        unless $note;
                    $council_email = 'N/A' unless $council_email;
                    $notgot{$council_email}{$row->{category}}++;
                    $note{$council_email}{$row->{category}} = $note;
                }
                push @to, [ $council_email, $name ];
                $recips{$council_email} = 1;
                $send_email = 1;
            }
        }
        @recips = keys %recips;
        next unless $all_confirmed;

        $template = 'submit-council';
        $template = 'submit-brent' if $row->{council} eq 2488 || $row->{council} eq 2237;
        $template = File::Slurp::read_file("$FindBin::Bin/../templates/emails/$template");

        if ($h{category} eq _('Other')) {
            $h{category_footer} = _('this type of local problem');
            $h{category_line} = '';
        } else {
            $h{category_footer} = "'" . $h{category} . "'";
            $h{category_line} = sprintf(_("Category: %s"), $h{category}) . "\n\n";
        }

        $h{councils_name} = join(_(' and '), @dear);
        if ($h{category} eq _('Other')) {
            $h{multiple} = @dear>1 ? "[ " . _("This email has been sent to both councils covering the location of the problem, as the user did not categorise it; please ignore it if you're not the correct council to deal with the issue, or let us know what category of problem this is so we can add it to our system.") . " ]\n\n"
                : '';
        } else {
            $h{multiple} = @dear>1 ? "[ " . _("This email has been sent to several councils covering the location of the problem, as the category selected is provided for all of them; please ignore it if you're not the correct council to deal with the issue.") . " ]\n\n"
                : '';
        }
        $h{missing} = ''; 
        if ($missing) {
            my $name = $areas_info->{$missing}->{name};
            $h{missing} = '[ '
              . sprintf(_('We realise this problem might be the responsibility of %s; however, we don\'t currently have any contact details for them. If you know of an appropriate contact address, please do get in touch.'), $name)
              . " ]\n\n";
        }

    }

    unless ($send_email || $send_web) {
        die 'Report not going anywhere for ID ' . $row->{id} . '!';
    }

    my $testing_email = mySociety::Config::get('TESTING_EMAIL');
    if ($row->{email} eq $testing_email) {
        @recips = ( $testing_email );
        $send_web = 0;
        $send_email = 1;
    } elsif (mySociety::Config::get('STAGING_SITE')) {
        # on a staging server send emails to ourselves rather than the councils
        @recips = ( mySociety::Config::get('CONTACT_EMAIL') );
    } elsif ($site eq 'emptyhomes') {
        my $council = $row->{council};
        my $country = $areas_info->{$council}->{country};
        if ($country eq 'W') {
            push @recips, 'shelter@' . mySociety::Config::get('EMAIL_DOMAIN');
        } else {
            push @recips, 'eha@' . mySociety::Config::get('EMAIL_DOMAIN');
        }
    }

    # Special case for this parish council
    # if ($address && $address =~ /Sprowston/ && $row->{council} == 2233 && $row->{category} eq 'Street lighting') {
    #     $h{councils_name} = 'Sprowston Parish Council';
    #     my $e = 'parishclerk' . '@' . 'sprowston-pc.gov.uk';
    #     @to = ( [ $e, $h{councils_name} ] );
    #     @recips = ($e);
    # }

    # Multiply results together, so one success counts as a success.
    my $result = -1;

    if ($send_email) {
        $template = _($template);
        my $email = mySociety::Locale::in_gb_locale { mySociety::Email::construct_email({
            _template_ => $template,
            _parameters_ => \%h,
            To => \@to,
            From => [ $row->{email}, $row->{name} ],
            'Message-ID' => sprintf('<report-%s-%s@mysociety.org>', time(), unpack('h*', random_bytes(5, 1))),
        }) };
        if (!$nomail) {
            $result *= mySociety::EmailUtil::send_email($email, mySociety::Config::get('CONTACT_EMAIL'), @recips);
        } else {
            print $email;
        }
    }

    if ($send_web eq 'easthants') {
        $h{message} = construct_easthants_message(%h);
        if (!$nomail) {
            $result *= post_easthants_message(%h);
        }
    } elsif ($send_web eq 'london') {
        $h{message} = construct_london_message(%h);
        if (!$nomail) {
            $result *= post_london_report(%h);
        }
    }

    if ($result == mySociety::EmailUtil::EMAIL_SUCCESS) {
        dbh()->do('UPDATE problem SET whensent=ms_current_timestamp(),
            lastupdate=ms_current_timestamp() WHERE id=?', {}, $row->{id});
        dbh()->commit();
    } else {
        dbh()->rollback();
    }
}

if ($verbose) {
    print "Council email addresses that need checking:\n" if keys %notgot;
    foreach my $e (keys %notgot) {
        foreach my $c (keys %{$notgot{$e}}) {
            print $notgot{$e}{$c} . " problem, to $e category $c (" . $note{$e}{$c}. ")\n";
        }
    }
}

sub lookupNominatimLocation {
    my ($latitude, $longitude) = @_;
    my $url =
    "${nominatimbase}reverse?format=xml&zoom=16&lat=$latitude&lon=$longitude";
    my $j = LWP::Simple::get($url);
    if ($j) {
        my $ref = XMLin($j);
#        print STDERR "URL: $url\n";
#        print STDERR Dumper($ref);
        return $ref;
    } else {
        print STDERR "No reply from $url\n";
    }
    return undef;
}
sub getOSMWayTags {
    my $wayid = shift;
    my $url = "${osmbase}0.6/way/$wayid";
#    print STDERR "URL: $url\n";
    my $j = LWP::Simple::get($url);
    if ($j) {
        my $ref = XMLin($j);
#        print STDERR Dumper($ref);
        my %tags;
        map { $tags{$_->{'k'}} = $_->{'v'} } @{$ref->{way}->{tag}};
        return \%tags;
    } else {
        print STDERR "No reply from $url\n";
    }
    return undef;
}

sub guessRoadOperator {
    my $inforef = shift;
    my $highway = $inforef->{highway} || "unknown";
    my $ref =  $inforef->{ref} || "unknown";

    my $operator;
    if ( mySociety::Config::get('COUNTRY') eq 'NO' ) {
        if ($highway eq "trunk"
            || $highway eq "primary"
            || $ref =~ m/E \d+/
            || $ref =~ m/Fv\d+/i
            ) {
            $operator = "Statens Vegvesen";
        }
    }
#    print STDERR "Guessing operator $operator\n" if defined $operator;
    return $operator;
}

sub getNearestRoadTags {
    my ($latitude, $longitude) = @_;
    my $inforef = lookupNominatimLocation($latitude, $longitude);
    if ('way' eq $inforef->{result}->{osm_type}) {

        my $osmtags = getOSMWayTags($inforef->{result}->{osm_id});
#        print STDERR Dumper $osmtags;
        unless (exists $osmtags->{operator}) {
            my $guess = guessRoadOperator($osmtags);
            $osmtags->{operatorguess} = $guess if $guess;
        }
        return $osmtags;
    }
    return undef;
}

sub _get_district_for_contact {
    my ( $lat, $lon ) = @_;
    my $district =
      mySociety::MaPit::call( 'point', "4326/$lon,$lat", type => 'DIS' );
    ($district) = keys %$district;
    return $district;
}

# Essex has different contact addresses depending upon the district
# Might be easier if we start storing in the db all areas covered by a point
# Will do for now :)
sub essex_contact {
    my $district = _get_district_for_contact(@_);
    my $email;
    $email = 'eastarea' if $district == 2315 || $district == 2312;
    $email = 'midarea' if $district == 2317 || $district == 2314 || $district == 2316;
    $email = 'southarea' if $district == 2319 || $district == 2320 || $district == 2310;
    $email = 'westarea' if $district == 2309 || $district == 2311 || $district == 2318 || $district == 2313;
    die "Returned district $district which is not in Essex!" unless $email;
    return "highways.$email\@essexcc.gov.uk";
}

# Oxfordshire has different contact addresses depending upon the district
sub oxfordshire_contact {
    my $district = _get_district_for_contact(@_);
    my $email;
    $email = 'northernarea' if $district == 2419 || $district == 2420 || $district == 2421;
    $email = 'southernarea' if $district == 2417 || $district == 2418;
    die "Returned district $district which is not in Oxfordshire!" unless $email;
    return "$email\@oxfordshire.gov.uk";
}

# East Hampshire

sub construct_easthants_message {
    my %h = @_;
    my $message = '';
    $message .= "[ This report was also sent to the district council covering the location of the problem, as the user did not categorise it; please ignore if you're not the correct council to deal with the issue. ]\n\n"
        if $h{multiple};
    $message .= <<EOF;
Subject: $h{title}

Details: $h{detail}

$h{fuzzy}, or to provide an update on the problem, please visit the following link:

$h{url}

$h{closest_address}
EOF
    return $message;
}

my $eh_service;
sub post_easthants_message {
    my %h = @_;
    my $return = 1;
    $eh_service ||= EastHantsWSDL->on_fault(sub { my($soap, $res) = @_; die ref $res ? $res->faultstring : $soap->transport->status, "\n"; });
    try {
        # ServiceName, RemoteCreatedBy, Salutation, FirstName, Name, Email, Telephone, HouseNoName, Street, Town, County, Country, Postcode, Comments, FurtherInfo, ImageURL
        my $message = ent(encode_utf8($h{message}));
        my $name = ent(encode_utf8($h{name}));
        my $result = $eh_service->INPUTFEEDBACK(
            $h{category}, 'FixMyStreet', '', '', $name, $h{email}, $h{phone},
            '', '', '', '', '', '', $message, 'Yes', $h{image_url}
        );
        $return = 0 if $result eq 'Report received';
    } otherwise {
        my $e = shift;
        print "Caught an error: $e\n";
    };
    return $return;
}

# London

sub construct_london_message {
    my %h = @_;
    return <<EOF,
A user of FixMyStreet has submitted the following report of a local
problem that they believe might require your attention.

Subject: $h{title}

Details: $h{detail}

$h{fuzzy}, or to provide an update on the problem, please visit the
following link:

$h{url}

$h{closest_address}
Yours,
The FixMyStreet team
EOF
}

sub post_london_report {
    my %h = @_;
    my $phone = $h{phone};
    my $mobile = '';
    if ($phone =~ /^\s*07/) {
        $mobile = $phone;
        $phone = '';
    }
    my ($first, $last) = $h{name} =~ /^(\S*)(?: (.*))?$/;
    my %params = (
        Key => mySociety::Config::get('LONDON_REPORTIT_KEY'),
        Signature => Digest::MD5::md5_hex( $h{confirmed} . mySociety::Config::get('LONDON_REPORTIT_SECRET') ),
        Type => Utils::london_categories()->{$h{category}},
        RequestDate => $h{confirmed},
        RequestMethod => 'Web',
        ExternalId => $h{url},
        'Customer.Title' => '',
        'Customer.FirstName' => $first,
        'Customer.Surname' => $last,
        'Customer.Email' => $h{email},
        'Customer.Phone' => $phone,
        'Customer.Mobile' => $mobile,
        'ProblemDescription' => $h{message},
    );
    if ($h{used_map}) {
        $params{'Location.Latitude'} = $h{latitude};
        $params{'Location.Longitude'} = $h{longitude};
    } elsif (mySociety::PostcodeUtil::is_valid_postcode($h{query})) {
        # Didn't use map, and entered postcode, so use that.
        $params{'Location.Postcode'} = $h{query};
    } else {
        # Otherwise, lat/lon is all we have, even if it's wrong.
        $params{'Location.Latitude'} = $h{latitude};
        $params{'Location.Longitude'} = $h{longitude};
    }
    if ($h{has_photo}) {
        $params{'Document1.Name'} = 'Photograph';
        $params{'Document1.MimeType'} = 'image/jpeg';
        $params{'Document1.URL'} = $h{image_url};
        $params{'Document1.URLPublic'} = 'true';
    }
    my $browser = LWP::UserAgent->new;
    my $response = $browser->post( mySociety::Config::get('LONDON_REPORTIT_URL'), \%params );
    my $out = $response->content;
    if ($response->code ne 200) {
        print "Failed to post $h{id} to London API, response was " . $response->code . " $out\n";
        return 1;
    }
    my ($id) = $out =~ /<caseid>(.*?)<\/caseid>/;
    my ($org) = $out =~ /<organisation>(.*?)<\/organisation>/;
    my ($team) = $out =~ /<team>(.*?)<\/team>/;

    $org = london_lookup($org);
    dbh()->do("update problem set external_id=?, external_body=?, external_team=? where id=?", {},
        $id, $org, $team, $h{id});
    return 0;
}

# Nearest things

sub find_closest {
    my ($row, $latitude, $longitude) = @_;
    my $str = '';

    return '' unless $row->{used_map};

    # Get nearest road-type thing from Bing
    my $bingkey;
    try {
        $bingkey = mySociety::Config::get('BING_MAPS_API_KEY');
    } otherwise {
        my $e = shift;
        # Ignoring missing BING key, it is optional.
    };
    if ($bingkey) {
        my $url = "http://dev.virtualearth.net/REST/v1/Locations/$latitude,$longitude?c=en-GB&key=$bingkey";
        my $j = LWP::Simple::get($url);
        if ($j) {
            $j = JSON->new->utf8->allow_nonref->decode($j);
            if ($j->{resourceSets}[0]{resources}[0]{name}) {
                $str .= sprintf(_("Nearest road to the pin placed on the map (automatically generated by Bing Maps): %s\n\n"),
                                $j->{resourceSets}[0]{resources}[0]{name});
            }
        }
    }

    # Get nearest postcode from Matthew's random gazetteer (put in MaPit? Or elsewhere?)
    if ( mySociety::Config::get('COUNTRY') eq 'GB' ) {
        my $url = "http://gazetteer.dracos.vm.bytemark.co.uk/point/$latitude,$longitude.json";
        my $j = LWP::Simple::get($url);
        if ($j) {
            $j = JSON->new->utf8->allow_nonref->decode($j);
            if ($j->{postcode}) {
                $str .= sprintf(_("Nearest postcode to the pin placed on the map (automatically generated): %s (%sm away)\n\n"),
                                $j->{postcode}[0], $j->{postcode}[1]);
            }
        }
    }
    if ( mySociety::Config::get('COUNTRY') eq 'NO' ) {
        my $osmtags = getNearestRoadTags($latitude, $longitude);
        if ($osmtags) {
            my ($name, $ref) = ('','');
            $name =  $osmtags->{name} if exists $osmtags->{name};
            $ref = " ($osmtags->{ref})" if exists $osmtags->{ref};
            if ($name || $ref) {
                $str .= sprintf(_("Nearest named road to the pin placed on the map (automatically generated using OpenStreetmap): %s%s\n\n"),
                                $name, $ref);

                my $operator = $osmtags->{operator} ||
                    $osmtags->{operatorguess};
                if ($operator) {
                    $str .= sprintf(_("Guessed road operator for nearest named road: %s\n\n"),
                                    $operator);
                }
            }
        }
    }

    return $str;
}

sub london_lookup {
    my $org = shift;
    my $str = "Unknown ($org)";
    open(FP, "$FindBin::Bin/../data/dft.csv");
    while (<FP>) {
        /^(.*?),(.*)/;
        if ($org eq $1) {
            $str = $2;
            last;
        }
    }
    close FP;
    return $str;
}

